{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MDC-Android Compose Theme Adapter \u00b6 A library that enables reuse of Material Components for Android XML themes for theming in Jetpack Compose . The basis of theming in Jetpack Compose is the MaterialTheme composable, where you provide Colors , Shapes and Typography instances containing your styling parameters: MaterialTheme ( typography = type , colors = colors , shapes = shapes ) { // Surface, Scaffold, etc } Material Components for Android themes allow for similar theming for views via XML theme attributes, like so: <style name= \"Theme.MyApp\" parent= \"Theme.MaterialComponents.DayNight\" > <!-- Material color attributes --> <item name= \"colorPrimary\" > @color/purple_500 </item> <item name= \"colorSecondary\" > @color/green_200 </item> <!-- Material type attributes--> <item name= \"textAppearanceBody1\" > @style/TextAppearance.MyApp.Body1 </item> <item name= \"textAppearanceBody2\" > @style/TextAppearance.MyApp.Body2 </item> <!-- Material shape attributes--> <item name= \"shapeAppearanceSmallComponent\" > @style/ShapeAppearance.MyApp.SmallComponent </item> </style> This library attempts to bridge the gap between Material Components for Android XML themes, and themes in Jetpack Compose , allowing your composable MaterialTheme to be based on the Activity 's XML theme: MdcTheme { // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography // will now contain copies of the context's theme } This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time. Caution If you are using an AppCompat (i.e. non-MDC) theme in your app, you should use the AppCompat Compose Theme Adapter instead, as it attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose . Customizing the theme \u00b6 The MdcTheme() function will automatically read the host context's MDC theme and pass them to MaterialTheme on your behalf, but if you want to customize the generated values, you can do so via the createMdcTheme() function: val context = LocalContext . current val layoutDirection = LocalLayoutDirection . current var ( colors , type , shapes ) = createMdcTheme ( context = context , layoutDirection = layoutDirection ) // Modify colors, type or shapes as required. Then pass them // through to MaterialTheme... MaterialTheme ( colors = colors , typography = type , shapes = shapes ) { // rest of layout } Limitations \u00b6 There are some known limitations with the implementation at the moment: This relies on your Activity / Context theme extending one of the Theme.MaterialComponents themes. Text colors are not read from the text appearances by default. You can enable it via the setTextColors function parameter. Variable fonts are not supported in Compose yet, meaning that the value of android:fontVariationSettings are currently ignored. MDC ShapeAppearances allow setting of different corner families (cut, rounded) on each corner, whereas Compose's Shapes allows only a single corner family for the entire shape. Therefore only the app:cornerFamily attribute is read, others ( app:cornerFamilyTopLeft , etc) are ignored. You can modify the resulting MaterialTheme in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme. Usage \u00b6 repositories { google () } dependencies { implementation \"com.google.android.material:compose-theme-adapter:<version>\" } The latest release is: Library Snapshots \u00b6 Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them. Contributions \u00b6 Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. License \u00b6 Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#mdc-android-compose-theme-adapter","text":"A library that enables reuse of Material Components for Android XML themes for theming in Jetpack Compose . The basis of theming in Jetpack Compose is the MaterialTheme composable, where you provide Colors , Shapes and Typography instances containing your styling parameters: MaterialTheme ( typography = type , colors = colors , shapes = shapes ) { // Surface, Scaffold, etc } Material Components for Android themes allow for similar theming for views via XML theme attributes, like so: <style name= \"Theme.MyApp\" parent= \"Theme.MaterialComponents.DayNight\" > <!-- Material color attributes --> <item name= \"colorPrimary\" > @color/purple_500 </item> <item name= \"colorSecondary\" > @color/green_200 </item> <!-- Material type attributes--> <item name= \"textAppearanceBody1\" > @style/TextAppearance.MyApp.Body1 </item> <item name= \"textAppearanceBody2\" > @style/TextAppearance.MyApp.Body2 </item> <!-- Material shape attributes--> <item name= \"shapeAppearanceSmallComponent\" > @style/ShapeAppearance.MyApp.SmallComponent </item> </style> This library attempts to bridge the gap between Material Components for Android XML themes, and themes in Jetpack Compose , allowing your composable MaterialTheme to be based on the Activity 's XML theme: MdcTheme { // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography // will now contain copies of the context's theme } This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time. Caution If you are using an AppCompat (i.e. non-MDC) theme in your app, you should use the AppCompat Compose Theme Adapter instead, as it attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose .","title":"MDC-Android Compose Theme Adapter"},{"location":"#customizing-the-theme","text":"The MdcTheme() function will automatically read the host context's MDC theme and pass them to MaterialTheme on your behalf, but if you want to customize the generated values, you can do so via the createMdcTheme() function: val context = LocalContext . current val layoutDirection = LocalLayoutDirection . current var ( colors , type , shapes ) = createMdcTheme ( context = context , layoutDirection = layoutDirection ) // Modify colors, type or shapes as required. Then pass them // through to MaterialTheme... MaterialTheme ( colors = colors , typography = type , shapes = shapes ) { // rest of layout }","title":"Customizing the theme"},{"location":"#limitations","text":"There are some known limitations with the implementation at the moment: This relies on your Activity / Context theme extending one of the Theme.MaterialComponents themes. Text colors are not read from the text appearances by default. You can enable it via the setTextColors function parameter. Variable fonts are not supported in Compose yet, meaning that the value of android:fontVariationSettings are currently ignored. MDC ShapeAppearances allow setting of different corner families (cut, rounded) on each corner, whereas Compose's Shapes allows only a single corner family for the entire shape. Therefore only the app:cornerFamily attribute is read, others ( app:cornerFamilyTopLeft , etc) are ignored. You can modify the resulting MaterialTheme in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme.","title":"Limitations"},{"location":"#usage","text":"repositories { google () } dependencies { implementation \"com.google.android.material:compose-theme-adapter:<version>\" } The latest release is:","title":"Usage"},{"location":"#library-snapshots","text":"Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.","title":"Library Snapshots"},{"location":"#contributions","text":"Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.","title":"Contributions"},{"location":"#license","text":"Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"contributing/","text":"How to Contribute \u00b6 We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement \u00b6 Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews \u00b6 All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"contributing/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"contributing/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"using-snapshot-version/","text":"Using a Snapshot Version of the Library \u00b6 If you would like to depend on the cutting edge version of the MDC-Android Compose Theme Adapter library, you can use the snapshot versions that are published to GitHub Packages . These are updated on every commit to develop . To do so, you need to create a GitHub access token , and add the following to your build.gradle Maven repositories: maven { url = uri ( \"https://maven.pkg.github.com/material-components/material-components-android-compose-theme-adapter\" ) credentials { username = < github_username > password = < github_access_token > } } Then you can use a snapshot version by adding a com.google.android.material:compose-theme-adapter:<version>-SNAPSHOT dependency as per usual (see latest release here ). This will fetch the latest snapshot version, which your Gradle build won't cache. If you build after a new version has been published, that version will be used. See the official doc on Configuring Gradle for use with GitHub Packages for additional information. If you prefer to depend on a specific snapshot version, you can add com.google.android.material:compose-theme-adapter:<version>-<uniqueversion> , where <uniqueversion> is a combination of the date, a timestamp, and a counter (see all versions here ).","title":"Snapshots"},{"location":"using-snapshot-version/#using-a-snapshot-version-of-the-library","text":"If you would like to depend on the cutting edge version of the MDC-Android Compose Theme Adapter library, you can use the snapshot versions that are published to GitHub Packages . These are updated on every commit to develop . To do so, you need to create a GitHub access token , and add the following to your build.gradle Maven repositories: maven { url = uri ( \"https://maven.pkg.github.com/material-components/material-components-android-compose-theme-adapter\" ) credentials { username = < github_username > password = < github_access_token > } } Then you can use a snapshot version by adding a com.google.android.material:compose-theme-adapter:<version>-SNAPSHOT dependency as per usual (see latest release here ). This will fetch the latest snapshot version, which your Gradle build won't cache. If you build after a new version has been published, that version will be used. See the official doc on Configuring Gradle for use with GitHub Packages for additional information. If you prefer to depend on a specific snapshot version, you can add com.google.android.material:compose-theme-adapter:<version>-<uniqueversion> , where <uniqueversion> is a combination of the date, a timestamp, and a counter (see all versions here ).","title":"Using a Snapshot Version of the Library"}]}